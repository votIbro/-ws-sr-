
A1. Приемка робота

    1. Настроить подключение робота к сети полигона

1.1. Поменять имя робота в сети (host) c имени по умолчанию (turtlebro0X) на 
имя вида turtlebroXX, где XX - номер, написанный на наклейке робота

            Подключаем SD карту робота через кард-ридер, в Windows ничего не
нажимаем, в Ubuntu, сверху (меню Virtual Box), во вкладке Устройства, 
USB, выбираем имя, начинающееся на Generic
            В разделе system (7.5 Гб), в папке etc, нажать ПКМ в свободном месте и
открыть директорию в терминале (Открыть в терминале или Open in
terminal), открыть файл командой sudo nano hostname и изменить номер 
робота. Выход из редактора - Ctrl+S, Ctrl+X. Таким же способом 
меняем номер робота в файле hosts

1.2. Настроить подключение робота к сети роутера-полигона, используя 
кард-ридер

В разделе boot (268 Мб), открыть директорию в терминале, создать файл
командой sudo nano wpa_supplicant.conf с содержимым, найти которое
можно в мануале (https://manual.turtlebro.ru/), в разделе Подключение
робота к Сети через SD карту:

ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=US

network={
ssid="WIFI_NETWORK_NAME"
psk="WIFI_PASSWORD"
}

            Строки WIFI_NETWORK_NAME и WIFI_PASSWORD меняем на те, что в 
методичке

Вставляем SD карту в робота и включаем его. Если загорелись оранжевые диоды, значит, робот подключился к wi-fi. Снова вытаскиваем SD карту, смотрим  IP робота (раздел boot, папка configs, файл ifconfig.dump, IP начинается на 192.168.106.ХХХ)
Вставить SD карту в робота и включить его. 
В терминале подключаемся к роботу командой ssh pi@IP РОБОТА

	1.3. Продемонстрировать получение IP-адреса робота в сети роутера-полигона
		hostname -I

A2. Проверка базовой информации робота

    1. Продемонстрировать название дистрибутива Linux
        lsb_release -a (в строке Distributor ID)

    2. Продемонстрировать кодовое имя сборки Linux
        lsb_release -a (в строке Codename)

    3. Продемонстрировать версию интерпретатора Python3
        python3 -V

    4. Продемонстрировать версию библиотеки rospy
        rosversion rospy или pip3 show rospy

    5. Продемонстрировать температуру процессора в градусах (С)
        vcgencmd measure_temp

    6. Продемонстрировать версию пакета turtlebro
        rosversion turtlebro

    7. Продемонстрировать версию прошивки микроконтроллера материнской платы
        rosservice call /board_info {} (после строчки firmware)

    8. Продемонстрировать серийный номер системной платы робота (mcu_id)
        rosservice call /board_info {} (после строчки mcu_id)

    9. Продемонстрировать размер оперативной памяти (Kb)
        free (в строке Mem, total)

    10. Продемонстрировать текущий часовой пояс на роботе в формате “Time
zone:Continent/City (XXX, +XXXX)”

        	timedatectl (в строке Time zone)

    11. Продемонстрировать версию образа ОС, установленной на Raspberry Pi
          cd ../.. (перед $ должен появится /, что значит, что вы в корневом каталоге)

          sudo nano boot/version (откроется редактор nano с версией, по идее, 0.10a)

          Ctrl+X

	cd

A3. Проверка модуля сетевого подключения

ПРИМЕЧАНИЕ

	Здесь всё зависит от задания. Командой iwconfig можно узнать частоту текущей 
сети, а с помощью raspi-config поменять её в терминале робота. На крайний 
случай можно изменить сеть wi-fi с помощью SD карты, как в пункте А1

    1. Настроить подключение к сети 2.4 ГГц роутера-полигона. Продемонстрировать 
текущую частоту подключения робота к сети роутера-полигона

       	iwconfig (в пункте Frequency будет частота сети, к которой сейчас подключен 
робот, т. е. если вы настраивали wi-fi через SD карту, то в пункте ESSID будет 
FieldBase_2.4G)
	

    2. Настроить подключение к сети 5 ГГц роутера-полигона. Продемонстрировать 
текущую частоту подключения робота к сети роутера-полигона

        	sudo raspi-config (откроются опции RaspberryPi)

	Два раза выбираем первый пункт клавишей Enter, вводим имя новой сети 
(FieldBase_5G), жмём Enter, вводим пароль от сети (wsryazan2022), ждём, когда 
снова откроются опции RaspberryPi, выходим через Esc

	Перезагружаем робота командой sudo systemctl reboot, подключаемся к нему

	iwconfig (в пункте Frequency)

A4. Проверка ROS процессов

    1. Продемонстрировать получение списка топиков на роботе
        rostopic list (сверить с топиками в мануале в разделе Параметры и настройка
        через launch, Работают топики)

    2. Продемонстрировать получение установленных ROS-пакетов
        rospack list или rospack list | cut -f6 -d'/' (сверить с пакетами в мануале в разделе 
        RaspberryPi, Установленное ПО на microSD карту)

А5. Проверка работы камеры

    1. Продемонстрировать наличие подключенной камеры в списке подключенных 
устройств /dev/…  путем выделения ее курсором мыши

        	ls /dev/video0

    2. Произвести физическое отключение и включение камеры на роботе
        Вытянуть USB шнур слева от выключателя робота и вставить обратно

        Перезагружаем робота командой sudo systemctl reboot, подключаемся к нему
        Если загорелся синий диод возле камеры - она включена

    3. Продемонстрировать работоспособность камеры
        IP РОБОТА:8080 (в браузере)

    4. Продемонстрировать получение данных о максимальном разрешении работы 
камеры

        	v4l2-ctl --list-formats-ext (строка Size: Discrete 1600x1200)

A6. Проверка одометрии колес

    2. Во время сдачи модуля необходимо

        2.1. Продемонстрировать проезд робота вперед по оси X и корректность 
отображения получаемой одометрии, в соответствии с осями направления 
робота

            Сбросить одометрию командой rosservice call /reset
            Посмотреть одометрию командой rostopic echo /odom
            Заставить двигаться вперёд по оси Х через web интерфейс (клавиша W)

        2.2. Продемонстрировать проезд робота назад по оси X и корректность 
отображения получаемой одометрии, в соответствии с осями направления 
робота
            
Заставить двигаться назад по оси Х через web интерфейс (клавиша S)

        2.3. Продемонстрировать сброс одометрии
            rosservice call /reset

        2.4. Продемонстрировать запуск робота на выполнение вращения влево по оси Z 
и корректность отображения получаемой одометрии, в соответствии с осями 
направления робота
            
Заставить поворачиваться влево через web интерфейс (клавиша A)

        2.5. Продемонстрировать запуск робота на выполнение вращения вправо по оси Z 
и корректность отображения получаемой одометрии, в соответствии с осями 
направления робота
            
Заставить поворачиваться вправо через web интерфейс (клавиша D)
            Остановить показ одометрии нажав Ctrl+C
            Сбросить одометрию командой rosservice call /reset

A7. Проверка состояния аккумуляторной батареи

        1. Продемонстрировать текущее напряжения батареи в соответствующем топике
            rostopic echo /bat -n 1 (в строке voltage)

        2. Продемонстрировать текущее состояния батареи в соответствующем топике
            rostopic echo /bat -n 1 (в строке power_supply_status)

A8. Проверка IMU датчика

    1. Продемонстрировать данные IMU датчика в соответствующем топике
        rostopic echo /imu

    2. Продемонстрировать проверку соответствия частоты обновления данных
IMU с документацией на робота

rostopic hz /imu (в строке average rate. Сверить со значением в мануале в 
разделе Доступные топики, Топик /imu)

	Ctrl+C


    3. Продемонстрировать корректную работу IMU датчика в rviz
        В терминале пк (команды можно найти в мануале, в разделе Подключение к ROS 
        на роботе)

export ROS_MASTER_URI=http://IP РОБОТА:11311

export ROS_HOSTNAME=IP КОМПЬЮТЕРА (IP можно узнать с помощью
команды hostname -I, IP начинается на 192.168.106.ХХХ)

rviz

        В Rviz
            В Fixed frame выставить base_link
            Через add добавить RobotModel, а через add, By topic, добавить Imu
        Закрываем Rviz

A9. Проверка МК Atmega
Необходимо использовать файлы из репозитория для задач Worldskills (https://github.com/voltbro/ws-sro)

    1. Проверка работоспособности светодиодной ленты и кнопок D22-D25

        1.1. Необходимо загрузить тестовую прошивку Turtlebro-tester. Для компиляции
скетча необходимо найти в менеджере библиотек Arduino IDE библиотеку 
FastLed и установить ее. Версия библиотеки должна быть не ниже 3.2.0
            
Запустить Arduino IDE командой arduino в терминале пк, во вкладке 
Инструменты открыть менеджер библиотек (Управлять библиотеками) или сочетанием клавиш Ctrl+Shift+I
В поисковике вбить Fastled и установить библиотеку FastLED, проверить её наличие во вкладке Скетч, Подключить библиотеку, FastLED
Во вкладке Инструменты, Плата, выбираем Arduino Mega or Mega 2560, закрываем Arduino
Заходим в github по ссылке, нажимаем на зелёную кнопку Code, скачиваем ZIP, 
открываем скачанный архив (ws-sro-main), распаковываем папку Turtlebro-tester, 
открываем её, запускаем файл Turtlebro-tester.ino
В коде, после строки void loop() копируем часть кода с if до второй закрытой 
фигурной скобки, после этой скобки делаем отступ, вставляем скопированный 
блок, заменяем число 22 на 25, и все 29 на 26
Проверяем код, нажав на галочку и в открывшемся окне нажимаем Сохранить
С помощью провода microUSB подключаем пк к роботу (разъём MEGA в задней 
части робота)
Сверху (меню Virtual Box), во вкладке Устройства, USB выбираем имя 
начинающееся на Silicon Labs
В Arduino открываем вкладку Инструменты, Порт, выбираем 
единственный доступный порт
Нажимаем в Arduino стрелочку (возле галочки), дожидаемся конца 
загрузки, вытаскиваем шнур, включаем на роботе диоды кнопкой D22 или D25
Закрываем Arduino

    2. Проверка связи микроконтроллера Atmega с ROS

        2.1. Необходимо загрузить тестовую прошивку TB-ros-tester. Для корректной 
компиляции программы, содержащей ROS-ноду на микроконтроллере нужно 
добавить в список библиотек Arduino дополнительную библиотеку ros_lib. 
Подробнее об этом написано в инструкции к роботу

В терминале пк
scp pi@IP РОБОТА:/home/pi/ros_lib_noetic.tar.gz /home/ИМЯ ЮЗЕРА/ros_lib_noetic.tar.gz

    Открываем архив ros_lib_noetic.tar.gz, распаковываем папку 
    ros_lib по пути Домашняя папка/snap/arduino/70/Arduino/libraries
    Открываем скачанный с github архив ws-sro-main и распаковываем папку 
    TB-ros-tester, заходим в неё и запускаем файл TB-ros-tester.ino
    В Arduino проверяем наличие библиотеки ros_lib во вкладке Скетч, 
    Подключить библиотеку
    Загружаем код на робота, как в пункте 1.1, но не изменяем содержимое

        2.2. Удостовериться в работоспособности тестовой прошивки и связи 
микроконтроллера Atmega с ROS

	В терминале робота
    rostopic list (сверху должен быть /arduino_connect_tester)

    rostopic echo /arduino_connect_tester (должно появиться data: “Test”)

Закрываем Arduino и останавливаем всё



МОДУЛЬ В



Сопроводительные ссылки
https://github.com/voltbro/ws_serv_a
https://github.com/voltbro/ws_serv_b
https://github.com/voltbro/ws_serv_c 

Если возникнут проблемы с пакетами, в директории catkin_ws/src удалите проблемный пакет командой sudo rm ws_serv_(a, b или c) -r 
и установите заново в директории catkin_ws/src командой git clone (ссылка на проблемный пакет из списка выше)
Теперь соберите его в папке catkin_ws командой catkin_make --pkg ws_serv_(a, b или c)

B1. Проверка сервисных пакетов

    1. Продемонстрировать процесс обновления исходного кода для пакета ws_serv_a 
до последней версии, соответствующей версии в репозитории. В случае 
обновления данного пакета до сдачи модуля - продемонстрировать 
команду/команды с помощью которых происходило обновление

	cd ~/catkin_ws/src/ws_serv_a/

	git status

	git pull origin HEAD

    2. Продемонстрировать сборку обновленного пакета ws_serv_a
        cd ../.. (чтобы попасть в директорию catkin_ws/)

        catkin_make --pkg ws_serv_a

    3. Продемонстрировать запуск обновленного диагностического скрипта в пакете 
ws_serv_a

	cd src/ws_serv_a/launch/

roslaunch start_configure_A.launch

    4. Продемонстрировать параметр конфигурации (configuration checksum), 
полученный в результате работы скрипта

	Ближе к концу вывода прошлой команды пункт configuration checksum : 4103.2

B2. Обновление версии сервисных пакетов

    1. Продемонстрировать процесс получение списка всех коммитов пакета ws_serv_b
        cd ~/catkin_ws/src/ws_serv_b/

        git log (выйти из открывшегося меню клавишей Q)

    2. Продемонстрировать обновление пакета ws_serv_b к версии 0.0.6
        git checkout ID КОММИТА ВЕРСИИ 0.0.6

    3. Продемонстрировать сборку пакета ws_serv_b версии 0.0.6
        cd ../.. (чтобы попасть в директорию catkin_ws/)

        catkin_make --pkg ws_serv_b

    4. Продемонстрировать запуск обновленного диагностического скрипта в пакете 
ws_serv_b

	cd src/ws_serv_b/launch/

roslaunch start_configure_B.launch

    5. Продемонстрировать параметр конфигурации (configuration checksum), 
полученный в результате работы скрипта

	Там же, где в случае с В1, в конце строки должно быть 0х90ABFDA8

B3. Работа с различными ветками в репозитории сервисных пакетов

    1. Продемонстрировать список доступных веток в удаленном репозитории пакета 
ws_serv_c

	cd ~/catkin_ws/src/ws_serv_c/

	git pull

	git branch -a

    2. Продемонстрировать скачивание ветки dev из удаленного репозитория 
пакета ws_serv_c в его локальную копию. В случае выполнении этого пункта до 
сдачи модуля - продемонстрировать команду/команды с помощью которых происходило выполнение

	git checkout --track -b dev origin/new

     3. Продемонстрировать переход на ветку new в локальном репозитории
git checkout new

     4. Продемонстрировать процесс получения списка всех коммитов пакета ws_serv_c 
в ветке dev

	git log (выйти из открывшегося меню клавишей Q)

     5. Продемонстрировать обновление пакета ws_serv_c к версии 0.4.1
git checkout ID КОММИТА ВЕРСИИ 0.4.1

     6. Продемонстрировать сборку пакета ws_serv_c версии 0.4.1
            cd ../.. (чтобы попасть в директорию catkin_ws/)

catkin_make --pkg ws_serv_c

     7. Продемонстрировать запуск обновленного диагностического скрипта в пакете 
ws_serv_c

	cd src/ws_serv_c/launch/

roslaunch start_configure_C.launch

     8. Продемонстрировать параметр конфигурации (configuration checksum), 
полученный в результате работы скрипта

	Там же, где в случае с В1, в конце строки должно быть 0x9b41

B4. Сервисная работа с логами робота
Директория с логами для выполнения задания находиться в директории /home/pi/.ros_ws/log/

Если не работают команды с кавычками, сотрите эти кавычки и поставьте заново

    1. Поиск информации в лог файлах

        1.1. Продемонстрировать, что в директории с данными лог файлов 
(d598a8e0-1d39-11ec-b324-dca632ded726) успешно запущен веб-сервер (в логах 
есть запись Start WebServer)

	cd ~/.ros_ws/log/d(нажимаем TAB)

	cat webserver-9.log | grep "Start WebServer"

        1.2. Посчитать и продемонстрировать сколько раз c IP адреса 10.8.0.9 запросили 
главную страницу (GET /) в директории d598a8e0-1d39-11ec-b324-dca632ded726 
в логах веб-сервера webserver-9.log. Решение должно показать конкретное 
"число" а не визуальный подсчет

	cat webserver-9.log | grep 10.8.0.9 | grep "GET /" | wc -l

        1.3. Продемонстрировать список директорий с лог файлами по следующим 
параметрам

            1.3.1. Все директории лог файлов
                cd .. (чтобы попасть в директорию .ros_ws/log)

	    ls (директории синего цвета) или ls */ -d1 или find -mindepth 1 -type d

            1.3.2. Директории лог-файлов, в которых веб-сервер был запущен
    grep -rnw "Start WebServer" или grep -rnw "Start WebServer" | cut -f1 -d'/'

            1.3.3. Директории лог-файлов, в которых веб сервер не был запущен и

                1.3.3.1. Отсутствует лог файл
        find -mindepth 1 -type d '!' -exec test -e "{}/webserver-9.log" ';' -print
        или
        find -mindepth 1 -type d '!' -exec test -e "{}/webserver-9.log" ';' -print | cut -f2 -d"/"

                1.3.3.2. В файле отсутствует запись об успешном старте
find -name "webserver-9.log" -exec grep -iL "Start WebServer" {} \;
или
find -name "webserver-9.log" -exec grep -iL "Start WebServer" {} \; | cut -f2 -d”/”

    2. Администрирование лог файлов

        2.1. Измерить размер лог файлов ROS и вывести его
            du -h

        2.2. Написать скрипт (программу) (bash, python и тп) для управления логами.
Скрипт должен произвести архивацию всех директорий с лог файлами, по 
правилу, один архив одна директория с логами

	Создаём файл script с содержимым

	#!/bin/bash
	
	find * -maxdepth 0 -type d -exec tar -czvf {}.tar.gz {} \;

Сохраняем, выходим через Ctrl+S, Ctrl+Х

sudo chmod +x script

./script

	ls (должны появиться архивы красного цвета)



МОДУЛЬ С



С1. Замена и установка оборудования

    1. Произвести замену моторов на роботе и изготовление кабелей подключения (при 
необходимости провести модификацию базы робота)

	

    2. Смонтировать на робота дополнительную монтажную площадку
        

    3. Установить на монтажную площадку колонку
        

С2. Тестирование оборудования

    1. Продемонстрировать процесс тестирования колонки на роботе. Для тестирования 
можно использовать wav файл, который можно скачать по ссылке: 
http://data.voltbro.ru/hello.wav

	wget http://data.voltbro.ru/hello.wav

	aplay hello.wav

	С помощью alsamixer можно изменить громкость колонок

    2. Продемонстрировать процесс тестирования моторов на роботе
        Двигаем робота через web интерфейс






МОДУЛЬ D


Если не будет работать, сделать всё через ros_catkin_ws, а не catkin_ws


Используемые пакеты
    1. Пакет навигации: https://github.com/voltbro/turtlebro_navigation
    2. Пакет патрулирования: https://github.com/voltbro/turtlebro_patrol
    3. Пакет экскурсовода: https://github.com/voltbro/turtlebro_excursions

D1. Проверка автономной навигации на роботе

    1. Продемонстрировать запуск на роботе пакета для автономной навигации
	cd ~/catkin_ws/src/turtlebro_navigation/launch

	roslaunch turtlebro_slam_navigation.launch open_rviz:=0

    2. Продемонстрировать запуск Rviz и движение робота при помощи указания целей 
в Rviz на примере не менее 2-х целей

        В терминале пк
export ROS_MASTER_URI=http://IP РОБОТА:11311

export ROS_HOSTNAME=IP КОМПЬЮТЕРА

rviz

        В Rviz
            В Fixed frame выставить base footprint
            Через add добавить Robot Model
	Через add, by topic добавить:
map/Map
global plan/path
global costmap/costmap/Map
global costmap/footprint/polygon
scan/laser scan

        В верхнем меню выбираем розовую стрелку (2D Nav Goal) и двигаем робота


    3. Продемонстрировать созданную карту в Rviz
Двигаем робота в Rviz, чтобы полностью “открыть” карту
Ничего не закрываем и не останавливаем

    4. Продемонстрировать сохранение карты и её конфигурационного файла на 
робота, копирование этих файлов с робота в домашнюю (home) директорию ПК

        Открываем новый терминал, подключаемся к роботу
	rosrun map_server map_saver -f mappa (последнее слово - любое имя карты)

	Останавливаем запущенную ранее slam навигацию (пункт 1) через Ctrl+C
	В Rviz, при желании, можно сохранить конфиг в меню File, Save config по пути 
Домашняя папка, turtlebro_navigation, maps. В окошке Имя вводим любое имя
Закрываем Rviz

        В терминале пк
	scp pi@IP РОБОТА:/home/pi/mappa.pgm /home/ИМЯ ЮЗЕРА/mappa.pgm

    5. Продемонстрировать сохраненное в домашней директории ПК изображение при 
помощи любой программы отображения изображений. Построенная карта не 
должна иметь “неизвестных” зон

	Заходим в домашнюю папку, открываем файл mappa.pgm (или другое, 
выбранное вами, имя карты)

D2. Проверка функций патрулирования и экскурсовода

    1. Продемонстрировать установку на робота пакета патрулирования и пакет 
экскурсовода. В случае, если во время подготовки к сдаче модуля конкурсант 
уже выполнил установку данного пакета на робота, необходимо 
продемонстрировать папку с установленным пакетом


	cd ~/catkin_ws/src

	git clone https://github.com/voltbro/turtlebro_patrol

	cd ..

	catkin_make --pkg turtlebro_patrol

	cd src

	git clone https://github.com/voltbro/turtlebro_excursions

	cd ..

	catkin_make --pkg turtlebro_excursions

    2. Продемонстрировать изменение координат точек патрулирования в соответствии 
с указаниями оценивающих экспертов

	Ставим робота на точку старта, в терминале пк запускаем roscore

rosservice call /reset

	cd ~/catkin_ws/src/turtlebro_patrol/launch

	roslaunch patrol_run.launch

	Открываем новый терминал, подключаемся к роботу
	Запускаем web интерфейс, проезжаем несколько раз по полигону, 
останавливаясь и записывая значения X, Y и угла поворота (от двух точек)
	Возвращаем робота на точку старта, останавливаем patrol_run через Ctrl+C

rosservice call /reset

	cd ~/catkin_ws/src/turtlebro_patrol/data

	sudo nano goals.xml

	Копируем строку, начинающуюся на <goal, вставляем её ниже. Одна строка - 
одна точка для патрулирования. После х, у и theta вписываем координаты для 
точек, которые записали ранее. После name пишем номера точек - 1, 2, 3 и т. д.
Выходим из редактора через Ctrl+S, Ctrl+X

    3. Продемонстрировать запуск пакета патрулирования
cd ..

	cd launch

	roslaunch patrol.launch

    4. Продемонстрировать работу патрулирования (не менее 2-х циклов), включая 
выполнения задания

        4.1. Начало патрулирования
            Открываем новый терминал, подключаемся к роботу

	rostopic pub /patrol(здесь можно нажать TAB, и подождать, пока команда заполнится)_control std(и здесь TAB)_msgs/String(и здесь) "data: ‘start'" (start в апострофах)
	Вся команда:
		rostopic pub /patrol_control std_msgs/String "data: ‘start'"

        4.2. Пауза в патрулировании
            rostopic pub /patrol_control std_msgs/String "data: ‘pause'"

        4.3. Возобновление патрулирования
            rostopic pub /patrol_control std_msgs/String "data: ‘resume'"

        4.4. Остановку патрулирования и завершение работы пакета патрулирования
            rostopic pub /patrol_control std_msgs/String "data: ‘shutdown'"

    5. Продемонстрировать тестовую работу пакета экскурсовода

        5.1. Продемонстрировать работу технологии text-to-speech. Используя консольные 
команды необходимо произнести через колонки текст “Привет мир”

	sudo apt install festvox-ru (если утилиты ещё нет. Для англ. языка en вместо ru)

echo “Привет мир” | festival --tts --language russian


        5.2. Продемонстрировать начала движения робота-экскурсовода по маршруту в 
соответствии с указаниями оценивающих экспертов

	rosservice call /reset

cd ~/catkin_ws/src/turtlebro_excursions/src

	sudo nano point_service.py

	Копируем один из блоков

	if poin_name == “какое-либо число”:
		text = “какой либо текст”

	Делаем отступ, вставляем столько блоков, сколько вы сделали точек при 
работе с патрулированием, редактируем их, в point_name ставим 
названия ваших точек, в text записываем текст, который робот должен 
произнести в этой точке. Выходим из редактора, сохранив изменения

	cd ..

	roslaunch excursion.launch

	rostopic pub /patrol_control std_msgs/String "data: ‘start'"



МОДУЛЬ Е

E1. Стендовые испытания

Продемонстрировать проведение экскурсии к двум картинам. При считывании Aruco-кода картины роботу необходимо воспроизвести информацию о картине. Экскурсию необходимо производить из стартовой зоны. В ходе выполнения задания необходимо демонстрировать экспертам, что робот выполнил условное действие. Запуск и остановку экскурсии необходимо производить по команде экспертов

	

Е2. Создание собственного пакета

Для простоты пользования роботом условный заказчик потребовал произвести расширение пакета turtlebro_excursions. Для начала работы необходимо создать собственный пакет ws_turtlebro_package. Далее перенести в него

    1. .launch файл для запуска работы робота экскурсовода (патрулирование, поиск 
маркеров работа с колонкой)

	

    2. файл data/data.xml в котором необходимо указывать рабочие точки 
патрулирования

	

    3. Программу реализующую задачу по произношению названия картин в точках 
патрулирования

	

    Во время сдачи модуля необходимо

        1. Продемонстрировать файловую структуру нового пакета
            

        2. Продемонстрировать исходные коды созданных launch файлов
            

        3. Конкурсант должен быть готов внести изменения в параметры пакета 
ws_turtlebro_package по требованию экспертов во время сдачи модуля

	

        4. Продемонстрировать работу пакета ws_turtlebro_package на полигоне. 
Провести экскурсию по двум картинам в соответствии с заданием Е1

	

E3. Испытания на полигоне

После создания единого пакета ws_turtlebro_package и его тестирования необходимо корректно выполнить 3 цикла экскурсий. Экскурсии необходимо производить из стартовой зоны. Во время выполнения задания конкурсанту необходимо продемонстрировать экспертам, что робот выполнил условное действие и передал данные о картине. Запуск и остановку экскурсии необходимо производить по команде экспертов. Запрещено использование любых пакетов кроме ws_turtlebro_package
